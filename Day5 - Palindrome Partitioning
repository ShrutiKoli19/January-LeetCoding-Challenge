class Solution {
public:
    
    void dfs(vector<vector<string>> &result, string &s, int start, vector<string> &currstr){
        
        if(start>=s.length()){
            result.push_back(currstr);
        }
        
        for(int i=start; i<s.size(); i++){
            
            if(isPalindrome(s, start, i)){
                currstr.push_back(s.substr(start, i - start + 1));
                dfs(result, s, i+1, currstr);
                currstr.pop_back();
            }
        }
    }
    
    bool isPalindrome(string &s, int low, int high){
        
        while(low<high){
            if(s[low++] != s[high--])
                return false;
        }
        
        return true;
    }
    
    vector<vector<string>> partition(string s) {
        
        vector<vector<string>> result;
        
        vector<string> currstr;
        
        dfs(result, s, 0, currstr);
        return result;
    }
};
